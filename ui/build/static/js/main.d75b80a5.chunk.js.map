{"version":3,"sources":["service/persons.js","App.js","index.js"],"names":["baseURL","axios","get","then","response","data","person","post","delete","id","put","Notification","message","type","className","NotificationList","notifications","map","n","key","FilterForm","filterInput","handleFilter","value","onChange","NewPersonForm","name","number","handleName","handleNumber","handleSubmit","onSubmit","Persons","persons","handleRemove","onClick","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setFilterInput","setNotifications","notificationsRef","useRef","current","useEffect","personService","shownPersons","filter","p","length","toLowerCase","indexOf","addNotification","Date","valueOf","concat","setTimeout","input","event","target","preventDefault","confirmPrompt","existingPerson","item","window","confirm","updatedPerson","newPerson","catch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d75b80a5.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseURL = '/api/persons'\n\nconst add = (person) => (\n  axios\n    .post(baseURL, person)\n    .then(response => response.data)\n)\n\nconst getAll = () => (\n  axios\n    .get(baseURL)\n    .then(response => response.data)\n)\n\nconst remove = (person) => (\n  axios\n    .delete(`${baseURL}/${person.id}`)\n    .then(response => response.data)\n)\n\nconst update = (person) => (\n  axios\n    .put(`${baseURL}/${person.id}`, person)\n    .then(response => response.data)\n)\n\nexport default { getAll, add, remove, update }\n","import React, { useState, useEffect, useRef } from 'react'\nimport personService from './service/persons'\nimport './App.css'\n\n\nconst Notification = ({message, type}) => {\n  if (message === null)\n    return null\n\n  return (\n    <div className={`notification ${type}`}>{message}</div>\n  )\n}\n\nconst NotificationList = ({notifications}) => (\n  notifications.map(\n    n => <Notification key={n.id} message={n.message} type={n.type} />)\n)\n\nconst FilterForm = ({filterInput, handleFilter}) => (\n  <div>\n    show entries containing <input value={filterInput} onChange={handleFilter} />\n  </div>\n)\n\nconst NewPersonForm = ({name, number, handleName, handleNumber, handleSubmit}) => (\n  <form onSubmit={handleSubmit}>\n    <div>\n      name: <input value={name} onChange={handleName}/>\n    </div>\n    <div>\n      number: <input value={number} onChange={handleNumber}/>\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n)\n\nconst Persons = ({persons, handleRemove}) => (\n  persons.map(person => (\n      <div key={person.name}>\n        {person.name} {person.number} \n        <button onClick={handleRemove(person)}>delete</button>\n      </div>\n  ))\n)\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filterInput, setFilterInput] = useState('')\n  const [notifications, setNotifications] = useState([])\n  const notificationsRef = useRef(notifications)\n  notificationsRef.current = notifications\n\n  useEffect(() => {\n    personService.getAll()\n      .then(response => { setPersons(response) })\n  }, [])\n\n  const shownPersons = persons.filter(\n    p => filterInput.length < 1 \n        || p.name.toLowerCase().indexOf(filterInput.toLowerCase()) > -1\n  )\n\n  // returns first person with same name\n  const getPerson = (name) => {\n    const filtered = persons.filter(item => item.name === name)\n    return filtered[0]\n  }\n\n  const addNotification = (message, type) => {\n    const id = new Date().valueOf()\n    setNotifications(notifications.concat({ message, id, type }))\n    // remove notification after 5 seconds\n    setTimeout(() => {\n      setNotifications(notificationsRef.current.filter(n => n.id !== id))\n    }, 5000) \n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const confirmPrompt = `${newName} is already in the phonebook, replace number with new one?`\n\n    const existingPerson = getPerson(newName)\n    if (existingPerson) {\n      if (window.confirm(confirmPrompt)) {\n        personService\n          .update({...existingPerson, number: newNumber})\n          .then(updatedPerson => { \n            setPersons(persons.map(p => p.id === updatedPerson.id ? updatedPerson : p)) \n            addNotification(`Number updated for ${newName}`, 'success')\n          })\n      }\n    } else {\n      personService\n        .add({name: newName, number: newNumber})\n        .then(newPerson => { \n          setPersons(persons.concat(newPerson))\n          addNotification(`Added ${newName}`, 'success')\n        })\n      \n    }\n  }\n  \n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setFilterInput(event.target.value)\n  }\n\n  const handleRemove = (person) => () => {\n    if (window.confirm(`Delete ${person.name}`))\n      personService\n        .remove(person)\n        .then(() => {\n          setPersons(persons.filter(p => p.id !== person.id))\n          addNotification(`${person.name} removed from database`, 'success')\n        })\n        .catch(() => {\n          setPersons(persons.filter(p => p.id !== person.id))\n          addNotification(`${person.name} not found in database`, 'failure')\n        })\n  }\n  \n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <NotificationList notifications={notifications} />\n      <FilterForm input={filterInput} handleFilter={handleFilterChange} />\n      <h2>add new</h2>\n      <NewPersonForm \n        name={newName} number={newNumber} \n        handleName={handleNameChange} \n        handleNumber={handleNumberChange}\n        handleSubmit={handleSubmit} />\n      <h2>Numbers</h2>\n      <Persons persons={shownPersons} handleRemove={handleRemove} />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}